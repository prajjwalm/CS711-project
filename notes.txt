
        # assuming self.eta_w stores previous day's working ratio
        # Since planner type tries to go to work for a number of target days in a week
        #
        # some way to know avg people who went to work in susceptible population?
        #
        # 0: n0, 1: n1, ...
        # p0*n0 + p1*n1 + ... + p7*n7 (p4 = raghav) p0 > p1 > ... > p7
        #         t     t+1
        # p0=1    n0 -> n0=0
        # p1=1    n1 -> n1=n0
        # p2=1    n2 -> n2=n1
        # p3=0.8  n3 -> n3=n2 + 0.2*n3
        # p4=0.2  n4 -> n4=n3
        # p5=0    n5 ->
        # p6=0    n6 ->
        # p7=0    n7 ->
        #
        # p0..7, n0..7 -> n0..7
        #
        # P[worked exactly 7 days ago] = x
        #
        # n0 = n0*(1-p0) + n1*(1-p1)*x
        # n1 = n0*p0 + n1*(1-p1)*(1 - x) + n1*p1*x + n2*(1-p2)*x
        # n2 = n1*p1 + n2*(1-p2)*(1 - x) + n2*p2*x + n3*(1-p3)*x
        # ...
        # n6 = n5*p5 + n6*(1-p6)*(1 - x) + n6*p6*x + n7*(1-p7)*x
        # n7 = n6*p6 + n7*(1-p7)*(1 - x) + n7*p7*x
        # ________________________________________________________________
        #
        # p = f(x)    -> x is a measure of 'work history'
        # x = [1 if worked yesterday] + [6/7 if worked day before] + ...
        # x(@t+1) = x - [1/7 * n_days worked last week] + [1 if worked yesterday]
        #
        # x = [1 if worked yesterday] + [h if worked day before] + [h^2 ...] + ...
        #
        #
        # x = hx + [1 if worked yesterday] : for one person
        #
        # W.W.H.H.W.W.H
        # x=? (p=0.5)
        # 0|1|1.5|0.75|0.375|1.1875|1.59375|0.796875
        #
        # 1 / (1-h)
        #
        # 1, 2, ..., N=10^10
        # x1, x2, ..., xN
        #
        # E[no. of people working | t=t] = \sum f(xi)
        # E[no. of people working | t=t+1] = \sum f(xi*h + [1 if i worked yesterday])
        #         IF f is linear, f(x) = 1 - (1-h)*x
        #                                  = \sum f(xi)*h + \sum f([1 if i worked yesterday])
        #
        # eta_w = \sum f(xi)*h + \sum f([1 if i worked yesterday else 0])
        # eta_w = eta_w*h + eta_w*f(1) + (1-eta_w)*f(0)
        #       = eta_w*h + eta_w*h + (1-eta_w)
        #       = 1 - eta_w*(1 - 2h)
        #       this works if h < 1/2
        #       otherwise eta_w > 1
        #
        #
        # where p = f(x) in [0,1]
        #
        # wt = 1 - n/7
        # eta_w = N(1-h) - (1-2h)eta_w


t = 0

for all types: ratio(W)

t = 1

for all types: ratio(W) ??


TODO BUGS:
    1. sick people don't work in groups, so why raise the chance of infection?

































# info on data.json
    > danger is sqrt death_risk (adjust constant in base player)





# type_shr: periodic?
if len(self.last_week_actions) >= 7:
    self.last_week_actions.pop(0)

assert len(self.action_plan) == 0

cash_work = self.u_economic_w
virus_utility = -self._params["danger"]
death_risk = self.death_risk
active_infection_risk = self.work_infection_risk
passive_infection_risk = self.home_infection_risk
death_utility = self.u_death
health_belief = self.p_healthy
caution_multiplier = 100

# Strategy
# If he hasn't gone to work 4 days in last week, must go to work
# If has gone to work, then compares utility of work and home
# Since he works minimum 4 days a week, is extra cautious about other 3

work = cash_work + virus_utility * active_infection_risk * caution_multiplier + virus_utility * (
        1 - health_belief)

if self.last_week_actions.count("W") < 4:
    action = "W"
    logger.debug("Hasn't gone to work for 4 days in last week, so "
                 "choosing {0}".format(action))
elif work > 0:
    action = "W"
    logger.debug(
            "Working as perceived economic payoff is: {0:.3f}".format(
                    work)
    )
else:
    action = "H"

self.action_plan.append(action)
self.last_week_actions.append(action)


# type ri: linear
class TypeRi(_Person):

    def plan(self):
        if len(self.action_plan) != 0:
            return

        plan_days = 15

        virus_contact_prob_h = 1 - np.power(1 - self.home_infection_risk,
                                            np.arange(plan_days))
        logger.debug("virus contact prob_h = " + str(virus_contact_prob_h))
        virus_contact_prob_w = 1 - np.power(
                1 - (self.home_infection_risk + self.work_infection_risk),
                np.arange(plan_days))
        logger.debug("virus contact prob_w = " + str(virus_contact_prob_w))
        virus_contact_prob_delta = virus_contact_prob_w - virus_contact_prob_h
        logger.debug(
            "virus contact prob_delta = " + str(virus_contact_prob_delta))
        virus_util = virus_contact_prob_delta * self.death_risk * self.u_death
        logger.debug("virus util = " + str(virus_util))
        economic_util = self.u_economic_w * np.arange(plan_days)
        logger.debug("economic util = " + str(economic_util))
        net_util = virus_util + economic_util
        logger.debug(("net util = " + str(net_util)))
        work_days = int(np.argmax(net_util))
        logger.debug("work days = " + str(work_days))

        for i in range(work_days):
            self.action_plan.append("W")
        for i in range(plan_days - work_days):
            self.action_plan.append("H")
