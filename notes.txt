t = 0

for all types: ratio(W)

t = 1

for all types: ratio(W) ??




































# info on data.json
    > danger is sqrt death_risk (adjust constant in base player)





# type_shr: periodic?
if len(self.last_week_actions) >= 7:
    self.last_week_actions.pop(0)

assert len(self.action_plan) == 0

cash_work = self.u_economic_w
virus_utility = -self._params["danger"]
death_risk = self.death_risk
active_infection_risk = self.work_infection_risk
passive_infection_risk = self.home_infection_risk
death_utility = self.u_death
health_belief = self.p_healthy
caution_multiplier = 100

# Strategy
# If he hasn't gone to work 4 days in last week, must go to work
# If has gone to work, then compares utility of work and home
# Since he works minimum 4 days a week, is extra cautious about other 3

work = cash_work + virus_utility * active_infection_risk * caution_multiplier + virus_utility * (
        1 - health_belief)

if self.last_week_actions.count("W") < 4:
    action = "W"
    logger.debug("Hasn't gone to work for 4 days in last week, so "
                 "choosing {0}".format(action))
elif work > 0:
    action = "W"
    logger.debug(
            "Working as perceived economic payoff is: {0:.3f}".format(
                    work)
    )
else:
    action = "H"

self.action_plan.append(action)
self.last_week_actions.append(action)


# type ri: linear
class TypeRi(_Person):

    def plan(self):
        if len(self.action_plan) != 0:
            return

        plan_days = 15

        virus_contact_prob_h = 1 - np.power(1 - self.home_infection_risk,
                                            np.arange(plan_days))
        logger.debug("virus contact prob_h = " + str(virus_contact_prob_h))
        virus_contact_prob_w = 1 - np.power(
                1 - (self.home_infection_risk + self.work_infection_risk),
                np.arange(plan_days))
        logger.debug("virus contact prob_w = " + str(virus_contact_prob_w))
        virus_contact_prob_delta = virus_contact_prob_w - virus_contact_prob_h
        logger.debug(
            "virus contact prob_delta = " + str(virus_contact_prob_delta))
        virus_util = virus_contact_prob_delta * self.death_risk * self.u_death
        logger.debug("virus util = " + str(virus_util))
        economic_util = self.u_economic_w * np.arange(plan_days)
        logger.debug("economic util = " + str(economic_util))
        net_util = virus_util + economic_util
        logger.debug(("net util = " + str(net_util)))
        work_days = int(np.argmax(net_util))
        logger.debug("work days = " + str(work_days))

        for i in range(work_days):
            self.action_plan.append("W")
        for i in range(plan_days - work_days):
            self.action_plan.append("H")
